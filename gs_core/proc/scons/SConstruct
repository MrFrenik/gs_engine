#!/usr/bin/env python
import os
import sys

# Try to detect the host platform automatically.
# This is used if no `platform` argument is passed
if sys.platform.startswith("linux"):
    host_platform = "linux"
elif sys.platform == "darwin":
    host_platform = "osx"
elif sys.platform == "win32" or sys.platform == "msys":
    host_platform = "windows"
else:
    raise ValueError(
        "Could not detect platform automatically, please specify with "
        "platform=<platform>"
    )

env = Environment(ENV=os.environ)

is64 = sys.maxsize > 2 ** 32
if (env["TARGET_ARCH"] == "amd64"
    or env["TARGET_ARCH"] == "emt64"
    or env["TARGET_ARCH"] == "x86_64"
    or env["TARGET_ARCH"] == "arm64-v8a"):
    is64 = True

opts = Variables([], ARGUMENTS)

opts.Add(
    EnumVariable(
        "platform",
        "Target platform",
        host_platform,
        allowed_values=("linux", "osx", "windows"),
        ignorecase=2,
    )
)

opts.Add(
    EnumVariable(
        "target",
        "Compilation target",
        "release",
        allowed_values=("debug", "release"),
        ignorecase=2,
    )
)
opts.Add(
    PathVariable("target_path", "The path where the app will be installed", "../../bin/")
)

opts.Add(
    PathVariable("source_path", "The path where the source files lay", "../../source/")
)

opts.Add(
    PathVariable("include_path",  "Where your includes are", "../../third_party/include")
)

opts.Add(
    PathVariable("target_name", "The name of the app", "App", PathVariable.PathAccept)
)

opts.Add(
    EnumVariable("bits", "Target platform bits", "64" if is64 else "32", ("32", "64"))
)

opts.Add(
    EnumVariable(
        "OpenGL",
        "If using OpenGL as backend",
        "false",
        allowed_values=("false", "true"),
        ignorecase=2,
    )
)

# Create bin folder if it does not exist, it will throw an error
# if any of the paths above is not an actual path. Since the project
# template does not actually have the bin folder, it won't work if you use
# the default unless you create it manually.
#
# feel free to remove this if you don't want the bin folder
os.system("mkdir -p ../../bin/")

# update options
opts.Update(env)


if host_platform == "windows":
    env.Append(ENV=os.environ)
    if env["bits"] == "64":
        env = Environment(TARGET_ARCH="amd64")
    elif env["bits"] == "32":
        env = Environment(TARGET_ARCH="x86")
    opts.Update(env)

env.Append(CPPPATH=env['include_path'])

if env["platform"] == "linux":
    if env["target"] == "debug":
        env.Append(CCFLAGS=["-fPIC", "-g3", "-Og", "-std=gnu99"])
    else:
        env.Append(CCFLAGS=["-fPIC", "-O3", "-std=gnu99"])
        env.Append(LINKFLAGS=["-s"])

    env.Append(LINKFLAGS=["-ldl", "-lX11", "-lXi", "-lm", "-pthread"])
    if env["OpenGL"] == "true":
        env.Append(CCFLAGS=["-lGL"])

elif env["platform"] == "osx":
    if env["target"] == "debug":
        env.Append(CCFLAGS=["-g", "-O2", "-arch", "x86_64", "-std=gnu99", "-objective-c"])
    else:
        env.Append(CCFLAGS=["-g", "-O3", "-arch", "x86_64", "-std=gnu99", "-objective-c"])

    env.Append(LINKFLAGS=["-arch", "x86_64", "-framework", "CoreFoundation", "-framework",
                          "CoreVide", "-framework", "IOKit", "-framework", "Cocoa", "-framework", "Carbon"])
    if env["OpenGL"] == "true":
        env.Append(CCFLAGS=["-framework", "OpenGL"])

elif env["platform"] == "windows":
    env.Append(CPPDEFINES=["WIN32", "_WIN32", "_WINDOWS", "_CRT_SECURE_NO_WARNINGS"])
    if env["target"] == "debug":
        env.Append(CPPDEFINES=["_DEBUG"])
        env.Append(CCFLAGS=["-MD", "-std=gnu99"])
        env.Append(LINKFLAGS=["-DEBUG"])
    else:
        env.Append(CPPDEFINES=["NDEBUG"])
        env.Append(CCFLAGS=["-O2", "-MD", "-std=gnu99"])

    if env["bits"] == "32" and host_platform == "windows":
        env.Append(LINKFLAGS=["kernel32.lib", "user32.lib", "shell32.lib", "vcruntime.lib", "msvcrt.lib", "gdi32.lib", "Advapi32.lib", "winmm.lib"])
        if env["OpenGL"] == "true":
            env.Append(LINKFLAGS=["opengl32.lib"])
    else:
        env.Append(LINKFLAGS=["-mwindows", "-lkernel32", "-luser32", "-lshell32", "-lgdi32", "-lAdvapi32", "-lwinmm"])
        if env["OpenGL"] == "true":
            env.Append(LINKFLAGS=["-lopengl32"])


# Source Files
sources = Glob(f"{env['source_path']}/*.c")
sources += Glob(f"{env['source_path']}/*/*.c")
sources += Glob(f"{env['source_path']}/*.cpp")
sources += Glob(f"{env['source_path']}/*/*.cpp")

app = env.Program(
    target=f"{env['target_path']}{env['platform']}/{env['target_name']}", source=sources
)
Default(app)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
